package com.scott.transer.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.scott.annotionprocessor.TaskType;
import com.scott.transer.task.Task.TaskTypeConverter;

import com.scott.transer.task.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Void> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DataSource = new Property(0, String.class, "dataSource", false, "DATA_SOURCE");
        public final static Property DestSource = new Property(1, String.class, "destSource", false, "DEST_SOURCE");
        public final static Property SesstionId = new Property(2, String.class, "sesstionId", false, "SESSTION_ID");
        public final static Property Length = new Property(3, long.class, "length", false, "LENGTH");
        public final static Property StartOffset = new Property(4, long.class, "startOffset", false, "START_OFFSET");
        public final static Property EndOffset = new Property(5, long.class, "endOffset", false, "END_OFFSET");
        public final static Property TaskId = new Property(6, String.class, "taskId", false, "TASK_ID");
        public final static Property GroupId = new Property(7, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupName = new Property(8, String.class, "groupName", false, "GROUP_NAME");
        public final static Property CompleteTime = new Property(9, long.class, "completeTime", false, "COMPLETE_TIME");
        public final static Property CompleteLength = new Property(10, long.class, "completeLength", false, "COMPLETE_LENGTH");
        public final static Property State = new Property(11, int.class, "state", false, "STATE");
        public final static Property Type = new Property(12, Integer.class, "type", false, "TYPE");
        public final static Property UserId = new Property(13, String.class, "userId", false, "USER_ID");
    }

    private final TaskTypeConverter typeConverter = new TaskTypeConverter();

    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"DATA_SOURCE\" TEXT," + // 0: dataSource
                "\"DEST_SOURCE\" TEXT," + // 1: destSource
                "\"SESSTION_ID\" TEXT," + // 2: sesstionId
                "\"LENGTH\" INTEGER NOT NULL ," + // 3: length
                "\"START_OFFSET\" INTEGER NOT NULL ," + // 4: startOffset
                "\"END_OFFSET\" INTEGER NOT NULL ," + // 5: endOffset
                "\"TASK_ID\" TEXT," + // 6: taskId
                "\"GROUP_ID\" TEXT," + // 7: groupId
                "\"GROUP_NAME\" TEXT," + // 8: groupName
                "\"COMPLETE_TIME\" INTEGER NOT NULL ," + // 9: completeTime
                "\"COMPLETE_LENGTH\" INTEGER NOT NULL ," + // 10: completeLength
                "\"STATE\" INTEGER NOT NULL ," + // 11: state
                "\"TYPE\" INTEGER," + // 12: type
                "\"USER_ID\" TEXT);"); // 13: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        String dataSource = entity.getDataSource();
        if (dataSource != null) {
            stmt.bindString(1, dataSource);
        }
 
        String destSource = entity.getDestSource();
        if (destSource != null) {
            stmt.bindString(2, destSource);
        }
 
        String sesstionId = entity.getSesstionId();
        if (sesstionId != null) {
            stmt.bindString(3, sesstionId);
        }
        stmt.bindLong(4, entity.getLength());
        stmt.bindLong(5, entity.getStartOffset());
        stmt.bindLong(6, entity.getEndOffset());
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(7, taskId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(8, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(9, groupName);
        }
        stmt.bindLong(10, entity.getCompleteTime());
        stmt.bindLong(11, entity.getCompleteLength());
        stmt.bindLong(12, entity.getState());
 
        TaskType type = entity.getType();
        if (type != null) {
            stmt.bindLong(13, typeConverter.convertToDatabaseValue(type));
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(14, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        String dataSource = entity.getDataSource();
        if (dataSource != null) {
            stmt.bindString(1, dataSource);
        }
 
        String destSource = entity.getDestSource();
        if (destSource != null) {
            stmt.bindString(2, destSource);
        }
 
        String sesstionId = entity.getSesstionId();
        if (sesstionId != null) {
            stmt.bindString(3, sesstionId);
        }
        stmt.bindLong(4, entity.getLength());
        stmt.bindLong(5, entity.getStartOffset());
        stmt.bindLong(6, entity.getEndOffset());
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(7, taskId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(8, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(9, groupName);
        }
        stmt.bindLong(10, entity.getCompleteTime());
        stmt.bindLong(11, entity.getCompleteLength());
        stmt.bindLong(12, entity.getState());
 
        TaskType type = entity.getType();
        if (type != null) {
            stmt.bindLong(13, typeConverter.convertToDatabaseValue(type));
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(14, userId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dataSource
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // destSource
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sesstionId
            cursor.getLong(offset + 3), // length
            cursor.getLong(offset + 4), // startOffset
            cursor.getLong(offset + 5), // endOffset
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taskId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // groupName
            cursor.getLong(offset + 9), // completeTime
            cursor.getLong(offset + 10), // completeLength
            cursor.getInt(offset + 11), // state
            cursor.isNull(offset + 12) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 12)), // type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setDataSource(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDestSource(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSesstionId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLength(cursor.getLong(offset + 3));
        entity.setStartOffset(cursor.getLong(offset + 4));
        entity.setEndOffset(cursor.getLong(offset + 5));
        entity.setTaskId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCompleteTime(cursor.getLong(offset + 9));
        entity.setCompleteLength(cursor.getLong(offset + 10));
        entity.setState(cursor.getInt(offset + 11));
        entity.setType(cursor.isNull(offset + 12) ? null : typeConverter.convertToEntityProperty(cursor.getInt(offset + 12)));
        entity.setUserId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Task entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Task entity) {
        return null;
    }

    @Override
    public boolean hasKey(Task entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
